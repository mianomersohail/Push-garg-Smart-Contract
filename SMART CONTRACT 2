// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

contract Dealing {
    // State variables
    mapping(address => uint256) internal Balance;
    mapping(uint256 => Deals) public NewDeals;
    uint256 public nextDealId; // Counter for unique Deal IDs
    mapping(address => uint256) public LockAmount;

    // Events
    event DepositMade(address indexed user, uint256 amount);
    event WithdrawalMade(address indexed user, uint256 amount);
    event DealCreated(uint256 indexed dealId, address indexed user1, address indexed user2, uint256 amount);
    event AgreementMade(uint256 indexed dealId, address indexed user, bool isUser1);
    event DealStatusUpdated(uint256 indexed dealId, Status status);
    event SatisfactionMarked(uint256 indexed dealId, address indexed user, bool isUser1);
    event DealClosed(uint256 indexed dealId, address user1, address user2);

    // Modifiers
    modifier OnlyUser1(uint _Id) {
        require(msg.sender == NewDeals[_Id].User1, "Not User1");
        _;
    }

    modifier OnlyUser2(uint _Id) {
        require(msg.sender == NewDeals[_Id].User2, "Not User2");
        _;
    }

    modifier BalanceCheck(uint _Id) {
        require(Balance[msg.sender] >= NewDeals[_Id].Amount, "Insufficient Balance");
        _;
    }

    modifier OnlyPending(uint _Id) {
        require(NewDeals[_Id].dealStatus == Status.Pending, "Deal is not Pending");
        _;
    }

    modifier UserNotSame(address _User1, address _User2) {
        require(_User1 != _User2, "Users cannot be the same");
        _;
    }

    modifier DealClosed(uint _Id) {
        require(NewDeals[_Id].dealStatus == Status.DealAdd, "Deal is not Add yet or Already Closed");
        _;
    }

    // Enum for Status Track
    enum Status { Pending, DealAdd, DealClose }

    // Struct for Adding New Deal
    struct Deals {
        uint256 Id;
        uint256 Amount;
        address User1;
        address User2;
        bool User1Agree;
        bool User2Agree;
        bool User1Done;
        bool User2Done;
        Status dealStatus;
    }

    // Functions
    function Withdraw(uint256 Amount) public {
        require(Balance[msg.sender] >= Amount, "Insufficient Balance");
        Balance[msg.sender] -= Amount;
        payable(msg.sender).transfer(Amount);
        emit WithdrawalMade(msg.sender, Amount); // Emit event for withdrawal
    }

    function Deposit() public payable {
        require(msg.value > 0, "Invalid Deposit");
        Balance[msg.sender] += msg.value;
        emit DepositMade(msg.sender, msg.value); // Emit event for deposit
    }

    receive() external payable {
        require(msg.value > 0, "Invalid Deposit");
        Balance[msg.sender] += msg.value;
        emit DepositMade(msg.sender, msg.value); // Emit event for deposit
    }

    function Balances() public view returns (uint256) {
        return Balance[msg.sender];
    }

    function NewDeal(uint256 _Amount, address _User1, address _User2) public UserNotSame(_User1, _User2) {
        uint256 dealId = nextDealId++;
        NewDeals[dealId] = Deals({
            Id: dealId,
            Amount: _Amount,
            User1: _User1,
            User2: _User2,
            User1Agree: false,
            User2Agree: false,
            User1Done: false,
            User2Done: false,
            dealStatus: Status.Pending
        });
        emit DealCreated(dealId, _User1, _User2, _Amount); // Emit event for deal creation
    }

    function User1Agree(uint256 _Id) public BalanceCheck(_Id) OnlyUser1(_Id) OnlyPending(_Id) {
        require(!NewDeals[_Id].User1Agree, "You Already Agreed");
        NewDeals[_Id].User1Agree = true;
        emit AgreementMade(_Id, msg.sender, true); // Emit event for User1 agreement
        if (NewDeals[_Id].User1Agree && NewDeals[_Id].User2Agree) {
            NewDeals[_Id].dealStatus = Status.DealAdd;
            Balance[NewDeals[_Id].User1] -= NewDeals[_Id].Amount;
            Balance[NewDeals[_Id].User2] -= NewDeals[_Id].Amount;
            LockAmount[NewDeals[_Id].User1] += NewDeals[_Id].Amount;
            LockAmount[NewDeals[_Id].User2] += NewDeals[_Id].Amount;
            emit DealStatusUpdated(_Id, Status.DealAdd); // Emit event for deal status update
        }
    }

    function User2Agree(uint256 _Id) public BalanceCheck(_Id) OnlyUser2(_Id) OnlyPending(_Id) {
        require(!NewDeals[_Id].User2Agree, "You Already Agreed");
        NewDeals[_Id].User2Agree = true;
        emit AgreementMade(_Id, msg.sender, false); // Emit event for User2 agreement
        if (NewDeals[_Id].User1Agree && NewDeals[_Id].User2Agree) {
            NewDeals[_Id].dealStatus = Status.DealAdd;
            emit DealStatusUpdated(_Id, Status.DealAdd); // Emit event for deal status update
        }
    }

    function User1Satisfy(uint256 _Id) public DealClosed(_Id) OnlyUser1(_Id) {
        require(!NewDeals[_Id].User1Done, "Already Done");
        NewDeals[_Id].User1Done = true;
        emit SatisfactionMarked(_Id, msg.sender, true); // Emit event for User1 satisfaction
        if (NewDeals[_Id].User1Done && NewDeals[_Id].User2Done) {
            NewDeals[_Id].dealStatus = Status.DealClose;
            Balance[NewDeals[_Id].User1] += NewDeals[_Id].Amount;
            Balance[NewDeals[_Id].User2] += NewDeals[_Id].Amount;
            LockAmount[NewDeals[_Id].User1] -= NewDeals[_Id].Amount;
            LockAmount[NewDeals[_Id].User2] -= NewDeals[_Id].Amount;
            emit DealClosed(_Id, NewDeals[_Id].User1, NewDeals[_Id].User2); // Emit event for deal closure
        }
    }

    function User2Satisfy(uint256 _Id) public DealClosed(_Id) OnlyUser2(_Id) {
        require(!NewDeals[_Id].User2Done, "Already Done");
        NewDeals[_Id].User2Done = true;
        emit SatisfactionMarked(_Id, msg.sender, false); // Emit event for User2 satisfaction
        if (NewDeals[_Id].User1Done && NewDeals[_Id].User2Done) {
            NewDeals[_Id].dealStatus = Status.DealClose;
            Balance[NewDeals[_Id].User1] += NewDeals[_Id].Amount;
            Balance[NewDeals[_Id].User2] += NewDeals[_Id].Amount;
            LockAmount[NewDeals[_Id].User1] -= NewDeals[_Id].Amount;
            LockAmount[NewDeals[_Id].User2] -= NewDeals[_Id].Amount;
            emit DealClosed(_Id, NewDeals[_Id].User1, NewDeals[_Id].User2); // Emit event for deal closure
        }
    }
}
